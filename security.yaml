AWSTemplateFormatVersion: "2010-09-09"
Description: Security Stack
Parameters:
  CreationDate:
    Description: Date
    Type: String
    Default: '2019-02-05 08:00:00'
    AllowedPattern: "^\\d{4}(-\\d{2}){2} (\\d{2}:){2}\\d{2}$"
    ConstraintDescription: Date and time of creation
Resources:
  CloudWatchAlarmSNS:
    Type: AWS::SNS::Topic
    Properties: 
      TopicName: sns-mgmt-cloudwatch-alarms
  CloudWatchAlarmSNSPolicy: 
    Type: AWS::SNS::TopicPolicy
    Properties: 
      Topics: 
        - Ref: "CloudWatchAlarmSNS"
      PolicyDocument: 
        Version: "2012-10-17"
        Statement: 
          - Sid: __default_statement_ID
            Effect: Allow
            Principal:
              AWS: "*"
            Action:
            - SNS:GetTopicAttributes
            - SNS:SetTopicAttributes
            - SNS:AddPermission
            - SNS:RemovePermission
            - SNS:DeleteTopic
            - SNS:Subscribe
            - SNS:ListSubscriptionsByTopic
            - SNS:Publish
            - SNS:Receive
            Resource: 
              !Sub |-
                ${CloudWatchAlarmSNS}
            Condition:
              StringEquals:
                AWS:SourceOwner: 
                  !Sub |-
                    '${AWS::AccountId}'
          - Sid: "AWSCloudWatchSNSPolicy"
            Effect: "Allow"
            Principal: 
              Service: "cloudwatch.amazonaws.com"
            Resource: 
              !Sub |-
                ${CloudWatchAlarmSNS}
            Action: "SNS:Publish"
# 3.1 Ensure a log metric filter and alarm exist for unauthorized API calls
  MetricUnauthAPI:
    Type: AWS::Logs::MetricFilter
    Properties: 
      FilterPattern: '{ ($.errorCode = "*UnauthorizedOperation") || ($.errorCode = "AccessDenied*") }'
      LogGroupName: aws-controltower/CloudTrailLogs
      MetricTransformations: 
        - 
          MetricName: "unauthorized_api_calls_metric"
          MetricNamespace: "CISBenchmark"
          MetricValue: "1"
  UnauthAPIAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties: 
      AlarmName: unauthorized_api_calls_alarm
      AlarmActions:
        - !Ref CloudWatchAlarmSNS
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: unauthorized_api_calls_metric
      Namespace: CISBenchmark
      Period: 300
      Statistic: Sum
      Threshold: 1
# 3.2 Ensure a log metric filter and alarm exist for Management Console sign-in without MFA
  MetricNoMFASignIn:
    Type: AWS::Logs::MetricFilter
    Properties: 
      FilterPattern: '{ ($.eventName = "ConsoleLogin") && ($.additionalEventData.MFAUsed != "Yes") }'
      LogGroupName: aws-controltower/CloudTrailLogs
      MetricTransformations: 
        - 
          MetricName: "no_mfa_console_signin_metric"
          MetricNamespace: "CISBenchmark"
          MetricValue: "1"
  NoMFASignInAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties: 
      AlarmName: no_mfa_console_signin_alarm
      AlarmActions:
        - !Ref CloudWatchAlarmSNS
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: no_mfa_console_signin_metric
      Namespace: CISBenchmark
      Period: 300
      Statistic: Sum
      Threshold: 1
# 3.3 Ensure a log metric filter and alarm exist for usage of "root" account
  MetricRootUsage:
    Type: AWS::Logs::MetricFilter
    Properties: 
      FilterPattern: '{ $.userIdentity.type = "Root" && $.userIdentity.invokedBy NOT EXISTS && $.eventType != "AwsServiceEvent" }'
      LogGroupName: aws-controltower/CloudTrailLogs
      MetricTransformations: 
        - 
          MetricName: "root_usage_metric"
          MetricNamespace: "CISBenchmark"
          MetricValue: "1"
  RootUsageAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties: 
      AlarmName: root_usage_alarm
      AlarmActions:
        - !Ref CloudWatchAlarmSNS
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: root_usage_metric
      Namespace: CISBenchmark
      Period: 300
      Statistic: Sum
      Threshold: 1
# 3.4 Ensure a log metric filter and alarm exist for IAM policy changes
  MetricIAMChanges:
    Type: AWS::Logs::MetricFilter
    Properties: 
      FilterPattern: '{ ($.eventName=DeleteGroupPolicy) || ($.eventName=DeleteRolePolicy) || ($.eventName=DeleteUserPolicy) || ($.eventName=PutGroupPolicy) || ($.eventName=PutRolePolicy) || ($.eventName=PutUserPolicy) || ($.eventName=CreatePolicy) || ($.eventName=DeletePolicy) || ($.eventName=CreatePolicyVersion) || ($.eventName=DeletePolicyVersion) || ($.eventName=AttachRolePolicy) || ($.eventName=DetachRolePolicy) || ($.eventName=AttachUserPolicy) || ($.eventName=DetachUserPolicy) || ($.eventName=AttachGroupPolicy) || ($.eventName=DetachGroupPolicy) }'
      LogGroupName: aws-controltower/CloudTrailLogs
      MetricTransformations: 
        - 
          MetricName: "iam_changes_metric"
          MetricNamespace: "CISBenchmark"
          MetricValue: "1"
  IAMChangesAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties: 
      AlarmName: iam_changes_alarm
      AlarmActions:
        - !Ref CloudWatchAlarmSNS
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: iam_changes_metric
      Namespace: CISBenchmark
      Period: 300
      Statistic: Sum
      Threshold: 1
# 3.5 Ensure a log metric filter and alarm exist for CloudTrail configuration changes
  MetricCloudTrailCfgChange:
    Type: AWS::Logs::MetricFilter
    Properties: 
      FilterPattern: '{ ($.eventName = CreateTrail) || ($.eventName = UpdateTrail) || ($.eventName = DeleteTrail) || ($.eventName = StartLogging) || ($.eventName = StopLogging) }'
      LogGroupName: aws-controltower/CloudTrailLogs
      MetricTransformations: 
        - 
          MetricName: "cloudtrail_cfg_changes_metric"
          MetricNamespace: "CISBenchmark"
          MetricValue: "1"
  CloudTrailCfgChangeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties: 
      AlarmName: cloudtrail_cfg_changes_alarm
      AlarmActions:
        - !Ref CloudWatchAlarmSNS
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: cloudtrail_cfg_changes_metric
      Namespace: CISBenchmark
      Period: 300
      Statistic: Sum
      Threshold: 1
# 3.6 Ensure a log metric filter and alarm exist for AWS Management Console authentication failures
  MetricConsoleAuthFail:
    Type: AWS::Logs::MetricFilter
    Properties: 
      FilterPattern: '{ ($.eventName = ConsoleLogin) && ($.errorMessage = "Failed authentication") }'
      LogGroupName: aws-controltower/CloudTrailLogs
      MetricTransformations: 
        - 
          MetricName: "console_signin_failure_metric"
          MetricNamespace: "CISBenchmark"
          MetricValue: "1"
  ConsoleAuthFailAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties: 
      AlarmName: console_signin_failure_alarm
      AlarmActions:
        - !Ref CloudWatchAlarmSNS
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: console_signin_failure_metric
      Namespace: CISBenchmark
      Period: 300
      Statistic: Sum
      Threshold: 1
# 3.7 Ensure a log metric filter and alarm exist for disabling or scheduled deletion of customer created CMKs
  MetricDisableCMK:
    Type: AWS::Logs::MetricFilter
    Properties: 
      FilterPattern: '{($.eventSource = kms.amazonaws.com) && (($.eventName=DisableKey)||($.eventName=ScheduleKeyDeletion)) }'
      LogGroupName: aws-controltower/CloudTrailLogs
      MetricTransformations: 
        - 
          MetricName: "disable_or_delete_cmk_changes_metric"
          MetricNamespace: "CISBenchmark"
          MetricValue: "1"
  DisableCMKAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties: 
      AlarmName: disable_or_delete_cmk_changes_alarm
      AlarmActions:
        - !Ref CloudWatchAlarmSNS
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: disable_or_delete_cmk_changes_metric
      Namespace: CISBenchmark
      Period: 300
      Statistic: Sum
      Threshold: 1
# 3.8 Ensure a log metric filter and alarm exist for S3 bucket policy changes
  MetricS3PolicyChange:
    Type: AWS::Logs::MetricFilter
    Properties: 
      FilterPattern: '{ ($.eventSource = s3.amazonaws.com) && (($.eventName = PutBucketAcl) || ($.eventName = PutBucketPolicy) || ($.eventName = PutBucketCors) || ($.eventName = PutBucketLifecycle) || ($.eventName = PutBucketReplication) || ($.eventName = DeleteBucketPolicy) || ($.eventName = DeleteBucketCors) || ($.eventName = DeleteBucketLifecycle) || ($.eventName = DeleteBucketReplication)) }'
      LogGroupName: aws-controltower/CloudTrailLogs
      MetricTransformations: 
        - 
          MetricName: "s3_bucket_policy_changes_metric"
          MetricNamespace: "CISBenchmark"
          MetricValue: "1"
  S3PolicyChangeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties: 
      AlarmName: s3_bucket_policy_changes_alarm
      AlarmActions:
        - !Ref CloudWatchAlarmSNS
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: s3_bucket_policy_changes_metric
      Namespace: CISBenchmark
      Period: 300
      Statistic: Sum
      Threshold: 1
# 3.9 Ensure a log metric filter and alarm exist for AWS Config configuration changes
  MetricAWSConfigChange:
    Type: AWS::Logs::MetricFilter
    Properties: 
      FilterPattern: '{ ($.eventSource = config.amazonaws.com) && (($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel) ||($.eventName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder)) }'
      LogGroupName: aws-controltower/CloudTrailLogs
      MetricTransformations: 
        - 
          MetricName: "aws_config_changes_metric"
          MetricNamespace: "CISBenchmark"
          MetricValue: "1"
  AWSConfigAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties: 
      AlarmName: aws_config_changes_alarm
      AlarmActions:
        - !Ref CloudWatchAlarmSNS
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: aws_config_changes_metric
      Namespace: CISBenchmark
      Period: 300
      Statistic: Sum
      Threshold: 1
# 3.10 Ensure a log metric filter and alarm exist for security group changes
  MetricSGChange:
    Type: AWS::Logs::MetricFilter
    Properties: 
      FilterPattern: '{ ($.eventName = AuthorizeSecurityGroupIngress) || ($.eventName = AuthorizeSecurityGroupEgress) || ($.eventName = RevokeSecurityGroupIngress) || ($.eventName = RevokeSecurityGroupEgress) || ($.eventName = CreateSecurityGroup) || ($.eventName = DeleteSecurityGroup) }'
      LogGroupName: aws-controltower/CloudTrailLogs
      MetricTransformations: 
        - 
          MetricName: "security_group_changes_metric"
          MetricNamespace: "CISBenchmark"
          MetricValue: "1"
  SGChangeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties: 
      AlarmName: security_group_changes_alarm
      AlarmActions:
        - !Ref CloudWatchAlarmSNS
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: security_group_changes_metric
      Namespace: CISBenchmark
      Period: 300
      Statistic: Sum
      Threshold: 1
# 3.11 Ensure a log metric filter and alarm exist for changes to Network Access Control Lists 
  MetricNACLChange:
    Type: AWS::Logs::MetricFilter
    Properties: 
      FilterPattern: '{ ($.eventName = CreateNetworkAcl) || ($.eventName = CreateNetworkAclEntry) || ($.eventName = DeleteNetworkAcl) || ($.eventName = DeleteNetworkAclEntry) || ($.eventName = ReplaceNetworkAclEntry) || ($.eventName = ReplaceNetworkAclAssociation) }'
      LogGroupName: aws-controltower/CloudTrailLogs
      MetricTransformations: 
        - 
          MetricName: "nacl_changes_metric"
          MetricNamespace: "CISBenchmark"
          MetricValue: "1"
  NACLChangeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties: 
      AlarmName: nacl_changes_alarm
      AlarmActions:
        - !Ref CloudWatchAlarmSNS
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: nacl_changes_metric
      Namespace: CISBenchmark
      Period: 300
      Statistic: Sum
      Threshold: 1
# 3.12 Ensure a log metric filter and alarm exist for changes to network gateways 
  MetricGWChange:
    Type: AWS::Logs::MetricFilter
    Properties: 
      FilterPattern: '{ ($.eventName = CreateCustomerGateway) || ($.eventName = DeleteCustomerGateway) || ($.eventName = AttachInternetGateway) || ($.eventName = CreateInternetGateway) || ($.eventName = DeleteInternetGateway) || ($.eventName = DetachInternetGateway) }'
      LogGroupName: aws-controltower/CloudTrailLogs
      MetricTransformations: 
        - 
          MetricName: "network_gw_changes_metric"
          MetricNamespace: "CISBenchmark"
          MetricValue: "1"
  GWChangeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties: 
      AlarmName: network_gw_changes_alarm
      AlarmActions:
        - !Ref CloudWatchAlarmSNS
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: network_gw_changes_metric
      Namespace: CISBenchmark
      Period: 300
      Statistic: Sum
      Threshold: 1
# 3.13 Ensure a log metric filter and alarm exist for route table changes
  MetricRouteTableChange:
    Type: AWS::Logs::MetricFilter
    Properties: 
      FilterPattern: '{ ($.eventName = CreateRoute) || ($.eventName = CreateRouteTable) || ($.eventName = ReplaceRoute) || ($.eventName = ReplaceRouteTableAssociation) || ($.eventName = DeleteRouteTable) || ($.eventName = DeleteRoute) || ($.eventName = DisassociateRouteTable) }'
      LogGroupName: aws-controltower/CloudTrailLogs
      MetricTransformations: 
        - 
          MetricName: "route_table_changes_metric"
          MetricNamespace: "CISBenchmark"
          MetricValue: "1"
  RouteTableChangeAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties: 
      AlarmName: route_table_changes_alarm
      AlarmActions:
        - !Ref CloudWatchAlarmSNS
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: route_table_changes_metric
      Namespace: CISBenchmark
      Period: 300
      Statistic: Sum
      Threshold: 1
# 3.14 Ensure a log metric filter and alarm exist for VPC changes
  MetricVPCChange:
    Type: AWS::Logs::MetricFilter
    Properties: 
      FilterPattern: '{ ($.eventName = CreateVpc) || ($.eventName = DeleteVpc) || ($.eventName = ModifyVpcAttribute) || ($.eventName = AcceptVpcPeeringConnection) || ($.eventName = CreateVpcPeeringConnection) || ($.eventName = DeleteVpcPeeringConnection) || ($.eventName = RejectVpcPeeringConnection) || ($.eventName = AttachClassicLinkVpc) || ($.eventName = DetachClassicLinkVpc) || ($.eventName = DisableVpcClassicLink) || ($.eventName = EnableVpcClassicLink) }'
      LogGroupName: aws-controltower/CloudTrailLogs
      MetricTransformations: 
        - 
          MetricName: "vpc_changes_metric"
          MetricNamespace: "CISBenchmark"
          MetricValue: "1"
  VPCAlarm:
    Type: AWS::CloudWatch::Alarm
    Properties: 
      AlarmName: vpc_changes_alarm
      AlarmActions:
        - !Ref CloudWatchAlarmSNS
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: 1
      MetricName: vpc_changes_metric
      Namespace: CISBenchmark
      Period: 300
      Statistic: Sum
      Threshold: 1
